package handler

import (
	"errors"
	"github.com/UniqueStudio/UniqueSSOBackend/config"
	"github.com/UniqueStudio/UniqueSSOBackend/internal/constants"
	"github.com/UniqueStudio/UniqueSSOBackend/internal/model"
	"github.com/UniqueStudio/UniqueSSOBackend/internal/tracer"
	"github.com/UniqueStudio/UniqueSSOBackend/internal/utils"
	"github.com/gin-contrib/sessions"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"github.com/xylonx/zapx"
	"go.uber.org/zap"
)

type RegisterUser struct {
	Name         string           `json:"name" binding:"required"`
	Gender       constants.Gender `json:"gender" binding:"required"`
	Phone        string           `json:"phone" binding:"required"`
	Email        string           `json:"email" binding:"required"`
	Password     string           `json:"password" binding:"required"`
	ValidateCode string           `json:"validate_code" binding:"required"`
}

func RegisterHandler(c *gin.Context) {
	apmCtx, span := tracer.Tracer.Start(c.Request.Context(), "Register")
	defer span.End()

	ru := new(RegisterUser)
	if err := c.ShouldBindJSON(ru); err != nil {
		span.RecordError(err)
		zapx.WithContext(apmCtx).Error("bind json failed", zap.Error(err))
		respParamBindingError(c, err)
		return
	}

	smsCode, err := utils.GetTmpCodeByID(apmCtx, ru.Phone)
	if err != nil {
		span.RecordError(err)
		respParamBindingError(c, err)
		return
	}

	if ru.ValidateCode != smsCode {
		err = errors.New("validate code wrong")
		span.RecordError(err)
		zapx.WithContext(apmCtx).Error("", zap.Error(err))
		respForbiddenError(c, err)
		return
	}

	user := &model.User{
		Phone:    ru.Phone,
		Email:    ru.Email,
		Password: ru.Password,
		Name:     ru.Name,
		// JoinTime: time.Now(), join time 应该是加入的时间，而不是注册的时间
		Gender: ru.Gender,
		// TODO generated by pg
		UID: uuid.New().String(),
	}
	uid, err := model.AddUser(apmCtx, user, constants.DefaultRoleName)
	if err != nil {
		span.RecordError(err)
		respDBError(c, err)
		return
	}

	// add session
	sess := sessions.Default(c)
	sess.Set(constants.SessionNameUID, uid)
	sess.Options(config.SessionOptions)
	sess.Save()

	// status code
	respOK(c, "success")
}
